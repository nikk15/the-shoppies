{"version":3,"sources":["assets/cinema.svg","assets/mail.svg","assets/goal.svg","components/Search/Search.js","components/Banner/Banner.js","components/Button/Button.js","components/Movie/Movie.js","components/LoadingMovie/LoadingMovie.js","components/Results/Results.js","components/Nominations/Nominations.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Search","props","className","src","popcorn","alt","placeholder","name","onChange","e","searchHandler","target","value","Banner","envelope","nominees","map","nominee","i","Title","Button","onClick","nominationHandler","class","disabled","enabled","Movie","useState","onRemove","setOnRemove","refRemove","useRef","useEffect","id","setTimeout","movie","current","console","log","clearTimeout","added","poster","trophy","title","year","LoadingMovie","Results","searchInProgress","results","length","Poster","Year","key","imdbID","nominated","complete","Nominations","nominations","require","config","App","state","search","searching","handleSearch","input","setState","addNomination","updatedResults","result","localStorage","setItem","JSON","stringify","removeNomination","updatedNominations","filter","noms","getItem","this","parse","prevState","axios","get","process","then","movies","data","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f6748718.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cinema.84107fd8.svg\";","module.exports = __webpack_public_path__ + \"static/media/mail.a8752ad4.svg\";","module.exports = __webpack_public_path__ + \"static/media/goal.2524395e.svg\";","import React from 'react';\nimport './Search.scss';\nimport popcorn from '../../assets/cinema.svg';\n\nfunction Search(props){\n    return (\n        <header className=\"search\">\n            <img className=\"search__icon\" src={popcorn} alt='popcorn' />\n            <div className=\"search__details\">\n                <h1 className=\"search__header\">The Shoppies</h1>\n                <form>\n                    <input \n                        placeholder=\"Find a movie to nominate...\"\n                        className=\"search__input\" \n                        name=\"search\" \n                        onChange={(e) => props.searchHandler(e.target.value)}\n                    />\n                </form>\n            </div>\n        </header>\n    )\n}\n\nexport default Search;","import React from 'react';\nimport './Banner.scss';\nimport envelope from '../../assets/mail.svg';\n\nfunction Banner(props){\n    return (\n        <header className=\"banner\">\n            <img className='banner__icon' src={envelope} alt='envelope' />\n            <div className='banner__details'>\n                <h2 className='banner__header'>And the nominees are...</h2>\n                <p>\n                    {props.nominees.map((nominee, i) => {\n                        return <span className={`banner__nominee--${i}`}>\n                            {i !== 4 ? `${nominee.Title}, `: nominee.Title}\n                        </span>\n                    })}\n                </p>\n            </div>\n        </header>\n    )\n    \n}\n\nexport default Banner;","import React from 'react';\nimport './Button.scss';\n\nfunction Button(props){\n    return (\n        <button \n            onClick={props.nominationHandler}\n            className={\"button \" + props.class}\n            disabled={!props.enabled}\n        >\n            {props.class}\n        </button>\n    )\n}\n\nexport default Button;","import React, { useState, useEffect, useRef } from 'react';\nimport './Movie.scss';\nimport Button from '../Button';\nimport trophy from '../../assets/goal.svg';\n\nfunction Movie(props){\n    const [onRemove, setOnRemove] = useState('');\n    let refRemove = useRef()\n\n    const handleNomination = (movie) => {\n        if(props.class==='remove'){\n            setOnRemove(' movie--remove')\n        } else {\n            props.nominationHandler(movie)\n        }\n    }\n\n    useEffect(() => {\n        if(onRemove){\n            let id  = setTimeout(()=> {\n                props.nominationHandler(props.movie)\n            }, 400)\n            refRemove.current = id;\n            console.log(refRemove.current)\n            return () => clearTimeout(refRemove.current)\n        }\n    }, [onRemove])\n\n    return (\n        <li className={`movie${props.added ? ' movie--added' : ''}${onRemove}`}>\n            <img \n                className={props.poster==='N/A' ? \"movie__trophy\" : \"movie__poster\"} \n                src={props.poster==='N/A' ? trophy : props.poster} \n                alt={props.poster==='N/A' ? 'trophy' : \"Poster\"}\n            />\n            <div className=\"movie__details\">\n                <h3 className=\"movie__title\">{props.title}</h3>\n                <p className=\"movie__year\">{props.year}</p>\n            </div>\n            <Button \n                nominationHandler={() => handleNomination(props.movie)}\n                class={props.class}\n                enabled={props.enabled}\n                movie={props.movie}\n            />\n        </li>\n    )\n    \n}\n\nexport default Movie;","import React from 'react';\nimport './LoadingMovie.scss';\n\nfunction LoadingMovie(props){\n    return (\n        <li className=\"loading\">\n            <div className=\"loading__poster\"></div>\n            <div className=\"loading__details\">\n                <div className=\"loading__title\"></div>\n                <div className=\"loading__year\"></div>\n            </div>\n            <div className=\"loading__button\"></div>\n        </li>\n    )\n    \n}\n\nexport default LoadingMovie;","import React from 'react';\nimport './Results.scss';\nimport Movie from '../Movie';\nimport LoadingMovie from '../LoadingMovie';\n\nfunction Results(props){\n    return (\n        <section className=\"results\">\n            <h2 className=\"results__header\">Movies: </h2>\n            {(!props.searchInProgress && !props.results.length) && \n                <h3 className=\"results__empty\">Not sure what to nominate? Search your favourite movies above!</h3>\n            }\n            {!!props.results.length && <ul className=\"results__list\">\n                {props.results.map(movie=>{\n                    return <Movie \n                        poster={movie.Poster}\n                        title={movie.Title}\n                        year={movie.Year}\n                        key={movie.imdbID}\n                        movie={movie}\n                        nominationHandler={props.nominationHandler}\n                        class={'nominate'}\n                        enabled={movie.nominated || props.complete ? false : true}            \n                    />\n                })}\n            </ul>}\n            {(!props.results.length && props.searchInProgress) && <ul className=\"results__list\">\n                    <LoadingMovie />\n                    <LoadingMovie />\n                    <LoadingMovie />\n                </ul>}\n        </section>\n    )\n}\n\nexport default Results;","import React from 'react';\nimport './Nominations.scss';\nimport Movie from '../Movie';\n\nfunction Nominations(props){\n    return (\n        <section className=\"nominations\">\n            <h2 className=\"nominations__header\">Your Nominations:</h2>\n            {!!props.nominations.length \n                ? <ul className=\"nominations__list\">\n                    {props.nominations.map((movie, i) =>{\n                        return <Movie \n                            poster={movie.Poster}\n                            title={movie.Title}\n                            year={movie.Year}\n                            key={movie.imdbID}\n                            movie={movie}\n                            nominationHandler={props.nominationHandler}\n                            class={'remove'}\n                            enabled={true}\n                            added={i===props.nominations.length-1 && props.added ? true : false}              \n                        />\n                    })}\n                </ul>\n                : <h3 className=\"nominations__empty\">You haven't nominated any movies yet.</h3>\n            }\n        </section>\n    )\n}\n\nexport default Nominations;","import React from 'react';\nimport './App.scss';\nimport Search from './components/Search';\nimport Banner from './components/Banner';\nimport Results from './components/Results';\nimport Nominations from './components/Nominations';\nimport axios from 'axios';\n\nrequire('dotenv').config();\n\nclass App extends React.Component {\n  state = {\n    search: '',\n    results: [],\n    nominations: [],\n    searching: false,\n    added: false\n  }\n\n  handleSearch = (input) => {\n    this.setState({search: input, searching: true})\n  }\n\n  addNomination = (movie) => {\n    let updatedResults = this.state.results.map(result => {\n      if(movie.imdbID === result.imdbID){\n        return {...result, nominated: true}\n       } else{ \n         return result;\n       }\n    })\n    this.setState({\n      results: updatedResults,\n      nominations: [...this.state.nominations, movie],\n      added: true\n    }, () => localStorage.setItem(\"nominations\", JSON.stringify(this.state.nominations)))\n  }\n\n  removeNomination = (movie) => {\n    let updatedResults = this.state.results.map(result => {\n      if(movie.imdbID === result.imdbID){\n        return {...result, nominated: false}\n       } else{ \n         return result;\n       }\n    })\n    let updatedNominations = this.state.nominations.filter(noms => noms.imdbID!==movie.imdbID)\n    this.setState({\n      results: updatedResults,\n      nominations: updatedNominations\n    }, () => localStorage.setItem(\"nominations\", JSON.stringify(this.state.nominations)))\n  }\n\n  componentDidMount(){\n    let nominations = localStorage.getItem(\"nominations\");\n    if(nominations!==null){\n      this.setState({nominations: JSON.parse(nominations)})\n    }\n  }\n\n  componentDidUpdate(prevState){\n    if((prevState.search !== this.state.search) && this.state.searching===true){\n      if(this.state.search===''){\n        this.setState({results: [], searching: false})\n      } else {\n        axios.get(`${process.env.REACT_APP_API_URL}?s=${this.state.search}&apikey=${process.env.REACT_APP_API_KEY}`)\n        .then(movies => {\n          if(movies.data.Search){\n            this.setState({results: movies.data.Search, searching: false})\n          }\n        })\n      }\n    }\n  }\n  \n  render(){\n    return (\n      <div className=\"App\">\n        {this.state.nominations.length !== 5 \n          ? <Search searchHandler={this.handleSearch}/>\n          : <Banner nominees={this.state.nominations}/>\n        }\n        <main className=\"main\">\n          <Results \n            results={this.state.results}\n            nominationHandler={this.addNomination} \n            complete={this.state.nominations.length === 5 ? true : false}\n            searchInProgress={this.state.search ? true : false}\n          />\n          <Nominations \n            nominations={this.state.nominations}\n            nominationHandler={this.removeNomination}\n            added={this.state.added}\n          />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n// attribute to add\n// <div>Icons made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n// <div>Icons made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n/* <div>Icons made by <a href=\"http://www.freepik.com/\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div> */","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}